# -*- coding: utf-8 -*-
"""IDS_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lUUhodFYDfHFQQw5ddgzpA-12bUqGerP
"""

import pandas as pd
import numpy as np
from scipy import stats

# Load the dataset
df = pd.read_csv(r'/content/IDS_project_dataset.csv')
# Remove last 210,000 rows if applicable
df = df.iloc[:-210000]

df

# Handling missing values
for column in df.columns:
    if pd.api.types.is_numeric_dtype(df[column]):
        mean_value = df[column].mean()
        df[column].fillna(mean_value, inplace=True)
    elif pd.api.types.is_object_dtype(df[column]):
        mode_value = df[column].mode()[0]
        df[column].fillna(mode_value, inplace=True)

print("Missing values count per column after filling:")
print(df.isnull().sum())

# Remove duplicates
df = df.drop_duplicates()
print("Shape of the DataFrame after dropping duplicates:")
print(df.shape)

df

import seaborn as sns
import matplotlib.pyplot as plt

# List of numerical columns for which to detect outliers
numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

# Plot box plots for each numerical column
plt.figure(figsize=(12, 8))
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(data=df, x=col ,color='lightblue')
    plt.title(f'Box Plot of {col}')

plt.tight_layout()
plt.show()

# Outliers handling (cap outliers to 3 standard deviations)
for column in df.columns:
    if pd.api.types.is_numeric_dtype(df[column]):
        z_scores = stats.zscore(df[column])
        abs_z_scores = np.abs(z_scores)
        outliers = (abs_z_scores > 3)
        df.loc[outliers, column] = np.sign(z_scores[outliers]) * 3 * df[column].std() + df[column].mean()

import seaborn as sns
import matplotlib.pyplot as plt

# List of numerical columns for which to detect outliers
numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

# Plot box plots for each numerical column
plt.figure(figsize=(12, 8))
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(data=df, x=col ,color='lightblue')
    plt.title(f'Box Plot of {col}')

plt.tight_layout()
plt.show()

df

import warnings
warnings.filterwarnings("ignore")

categorical_cols = ['HeartDisease', 'Smoking', 'AlcoholDrinking', 'Stroke',
                    'Sex', 'AgeCategory', 'Race', 'Diabetic',
                    'PhysicalActivity', 'GenHealth', 'Asthma',
                    'KidneyDisease', 'SkinCancer', 'DiffWalking']

numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

plt.figure(figsize=(15, 50))

for i, col in enumerate(categorical_cols, 1):
    plt.subplot(7, 2, i)
    sns.countplot(data=df, x=col, palette='viridis')
    plt.title(f'Distribution of {col}')
    plt.xticks(rotation=45)  # Rotate x labels for better readability

plt.tight_layout()
plt.show()

# Univariate Analysis for Numerical Variables
plt.figure(figsize=(15, 15))

for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 2, i)  # Adjust the layout based on the number of numerical columns
    sns.histplot(df[col], bins=20, kde=True, color='blue')
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

categorical_cols = ['HeartDisease', 'Smoking', 'AlcoholDrinking', 'Stroke',
                    'Sex', 'AgeCategory', 'Race', 'Diabetic',
                    'PhysicalActivity', 'GenHealth', 'Asthma',
                    'KidneyDisease', 'SkinCancer', 'DiffWalking']

numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

plt.figure(figsize=(15, 50))

for i, col in enumerate(categorical_cols, 1):
    plt.subplot(7, 2, i)
    sns.countplot(data=df, x=col, hue='Sex',palette='viridis')
    plt.title(f'Distribution of {col}')
    plt.xticks(rotation=45)  # Rotate x labels for better readability

plt.tight_layout()
plt.show()

df

import matplotlib.pyplot as plt
import seaborn as sns

categorical_cols = ['Sex', 'Smoking', 'AlcoholDrinking', 'Stroke', 'AgeCategory', 'Race', 'Diabetic',
                    'PhysicalActivity', 'GenHealth', 'Asthma', 'KidneyDisease', 'SkinCancer', 'DiffWalking']
numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

plt.figure(figsize=(15, 400))

# Iterate over each combination of categorical and numerical columns
for j, cat_col in enumerate(categorical_cols):
    for i, num_col in enumerate(numerical_cols):
        plt.subplot(len(categorical_cols) * len(numerical_cols), 1, j * len(numerical_cols) + i + 1)
        sns.boxplot(data=df, x=cat_col, y=num_col, palette='coolwarm', hue='HeartDisease', dodge=True)
        plt.title(f'{num_col} by {cat_col} and Heart Disease')
        plt.xticks(rotation=45)
        plt.legend(title='HeartDisease')  # Set legend title to 'HeartDisease' for clarity

plt.tight_layout()
plt.show()

correlation_matrix = df[numerical_cols].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Heatmap of Numerical Variables')
plt.show()

# Transform categorical data
for column in df.columns:
    if column == 'GenHealth':
        df[column] = df[column].replace({
            'Poor': 0, 'Fair': 1, 'Good': 2, 'Very good': 4, 'Excellent': 5
        })
    elif column == 'AgeCategory':
        df[column] = df[column].replace({
            '18-24': 0, '25-29': 1, '30-34': 2, '35-39': 3, '40-44': 4,
            '45-49': 5, '50-54': 6, '55-59': 7, '60-64': 8, '65-69': 9,
            '70-74': 10, '75-79': 11, '80 or older': 12
        })
    elif pd.api.types.is_object_dtype(df[column]) and column not in ['AgeCategory', 'GenHealth']:
        df[column] = df[column].replace({
            'Yes': 1, 'No': 0, 'Male': 1, 'Female': 0, 'White': 1, 'Black': 0
        })

# Display the DataFrame to confirm changes
print("Data after processing categorical columns:")
print(df.head(10))

# Calculate correlation matrix and identify correlated features
correlation_matrix = df.corr()
threshold = 0.8
correlated_features = set()

for i in range(len(correlation_matrix.columns)):
    for j in range(i):
        if abs(correlation_matrix.iloc[i, j]) > threshold:
            colname = correlation_matrix.columns[i]
            correlated_features.add(colname)

# Drop the correlated features
reduced_df = df.drop(columns=correlated_features)

# Display the results
print("Original DataFrame:\n", df)
print("\nCorrelated Features (to be removed):", correlated_features)
print("\nDataFrame after removing correlated features:\n", reduced_df)

import seaborn as sns
plt.figure(figsize=(14, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()